'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rand = void 0;
const BN = require("bn.js");
const prime_1 = require("./prime");
var Rand;
(function (Rand) {
    // Custom random bytes generator.
    let randomBytesImp = null;
    /**
     * Set your randomBytes generator.
     * @param randomBytes
     */
    function config(randomBytes) {
        randomBytesImp = randomBytes;
    }
    Rand.config = config;
    function randomBytes(byteSize) {
        return __awaiter(this, void 0, void 0, function* () {
            return randomBytesImp(byteSize);
        });
    }
    Rand.randomBytes = randomBytes;
    function randomBN(byteSize) {
        return __awaiter(this, void 0, void 0, function* () {
            const buf = yield randomBytes(byteSize);
            return new BN(buf.toString('hex'), 16);
        });
    }
    Rand.randomBN = randomBN;
    function randomBNStrict(byteSize) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                let buf = yield randomBytes(byteSize);
                let hByte = buf.readUInt8(0);
                if (hByte >= 127) {
                    return new BN(buf.toString('hex'), 16);
                }
            }
        });
    }
    Rand.randomBNStrict = randomBNStrict;
    function randomPrime(byteSize) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                let r = yield randomBN(byteSize);
                if (prime_1.Prime.isProbablyPrime(r)) {
                    return r;
                }
            }
        });
    }
    Rand.randomPrime = randomPrime;
    function randomPrimeStrict(byteSize) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                let r = yield randomBNStrict(byteSize);
                if (prime_1.Prime.isProbablyPrime(r)) {
                    return r;
                }
            }
        });
    }
    Rand.randomPrimeStrict = randomPrimeStrict;
    function randomPrime256Bit() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield randomPrime(32);
        });
    }
    Rand.randomPrime256Bit = randomPrime256Bit;
    function randomPrimeStrict256Bit() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield randomPrimeStrict(32);
        });
    }
    Rand.randomPrimeStrict256Bit = randomPrimeStrict256Bit;
    function randomBNLt(max) {
        return __awaiter(this, void 0, void 0, function* () {
            let byteLen = 1;
            if (max.bitLength() % 8 === 0) {
                byteLen = max.bitLength() / 8;
            }
            else {
                byteLen = Math.floor(max.bitLength() / 8) + 1;
            }
            while (true) {
                let r = yield randomBN(byteLen);
                r = r.mod(max);
                // to fix the bug in lib "bn.js" while byteLen === 1
                if (r.red) {
                    return r.fromRed();
                }
                else {
                    return r;
                }
            }
        });
    }
    Rand.randomBNLt = randomBNLt;
    // for pailliar cryptosystem
    // Deprecated
    function randomBNLtGCD(max) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                let r = yield randomBNLt(max);
                if (r.gcd(max).eqn(1)) {
                    return r;
                }
            }
        });
    }
    Rand.randomBNLtGCD = randomBNLtGCD;
    function randomBNLtCoPrime(max) {
        return __awaiter(this, void 0, void 0, function* () {
            while (true) {
                let r = yield randomBNLt(max);
                if (r.gcd(max).eqn(1)) {
                    return r;
                }
            }
        });
    }
    Rand.randomBNLtCoPrime = randomBNLtCoPrime;
})(Rand = exports.Rand || (exports.Rand = {}));
//# sourceMappingURL=rand.js.map